// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(unused_imports, dead_code)]
pub mod tankrs {

    use std::cmp::Ordering;
    use std::mem;

    extern crate flatbuffers;
    use self::flatbuffers::EndianScalar;

    pub enum WorldOffset {}
    #[derive(Copy, Clone, Debug, PartialEq)]

    pub struct World<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for World<'a> {
        type Inner = World<'a>;
        #[inline]
        fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table { buf: buf, loc: loc },
            }
        }
    }

    impl<'a> World<'a> {
        #[inline]
        pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            World { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args WorldArgs,
        ) -> flatbuffers::WIPOffset<World<'bldr>> {
            let mut builder = WorldBuilder::new(_fbb);
            builder.add_height(args.height);
            builder.add_width(args.width);
            builder.finish()
        }

        pub const VT_WIDTH: flatbuffers::VOffsetT = 4;
        pub const VT_HEIGHT: flatbuffers::VOffsetT = 6;

        #[inline]
        pub fn width(&self) -> u16 {
            self._tab.get::<u16>(World::VT_WIDTH, Some(0)).unwrap()
        }
        #[inline]
        pub fn height(&self) -> u16 {
            self._tab.get::<u16>(World::VT_HEIGHT, Some(0)).unwrap()
        }
    }

    pub struct WorldArgs {
        pub width: u16,
        pub height: u16,
    }
    impl<'a> Default for WorldArgs {
        #[inline]
        fn default() -> Self {
            WorldArgs {
                width: 0,
                height: 0,
            }
        }
    }
    pub struct WorldBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> WorldBuilder<'a, 'b> {
        #[inline]
        pub fn add_width(&mut self, width: u16) {
            self.fbb_.push_slot::<u16>(World::VT_WIDTH, width, 0);
        }
        #[inline]
        pub fn add_height(&mut self, height: u16) {
            self.fbb_.push_slot::<u16>(World::VT_HEIGHT, height, 0);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> WorldBuilder<'a, 'b> {
            let start = _fbb.start_table();
            WorldBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<World<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    #[inline]
    pub fn get_root_as_world<'a>(buf: &'a [u8]) -> World<'a> {
        flatbuffers::get_root::<World<'a>>(buf)
    }

    #[inline]
    pub fn get_size_prefixed_root_as_world<'a>(buf: &'a [u8]) -> World<'a> {
        flatbuffers::get_size_prefixed_root::<World<'a>>(buf)
    }

    #[inline]
    pub fn finish_world_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<World<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_world_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<World<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod Tankrs

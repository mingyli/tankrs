on: [push, pull_request]

name: Continuous integration

env:
  cargo-path: Cargo.toml

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path=${{env.cargo-path}}

  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --manifest-path=${{env.cargo-path}}

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path=${{env.cargo-path}}

  fmt:
    name: Rustfmt
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path=${{env.cargo-path}}
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --manifest-path=${{env.cargo-path}} -- --check

  clippy:
    name: Clippy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --manifest-path=${{env.cargo-path}} -- -W clippy::all -W clippy::pedantic -D warnings

  build-ts:
    name: Build Typescript
    runs-on: ubuntu-latest
    env:
      working-directory: ./client

    steps:
      - uses: actions/checkout@v2
      - name: Install Protoc
        uses: arduino/setup-protoc@master
      - run: yarn install
      - run: make all
        working-directory: ${{env.working-directory}}

  format-check:
    name: Check Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: yarn install
      - run: yarn run check-format

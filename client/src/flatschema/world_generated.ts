// automatically generated by the FlatBuffers compiler, do not modify

import * as NS5082733716034197683 from "./math_generated";
/**
 * @constructor
 */
export namespace Tankrs{
export class Tank {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Tank
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Tank {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Tank= obj
 * @returns Tank
 */
static getRootAsTank(bb:flatbuffers.ByteBuffer, obj?:Tank):Tank {
  return (obj || new Tank()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Tank= obj
 * @returns Tank
 */
static getSizePrefixedRootAsTank(bb:flatbuffers.ByteBuffer, obj?:Tank):Tank {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Tank()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param Vec2= obj
 * @returns Vec2|null
 */
pos(obj?:NS5082733716034197683.Vec2):NS5082733716034197683.Vec2|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new NS5082733716034197683.Vec2()).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param flatbuffers.Builder builder
 */
static startTank(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset posOffset
 */
static addPos(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset) {
  builder.addFieldStruct(0, posOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endTank(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createTank(builder:flatbuffers.Builder, posOffset:flatbuffers.Offset):flatbuffers.Offset {
  Tank.startTank(builder);
  Tank.addPos(builder, posOffset);
  return Tank.endTank(builder);
}
}
}
/**
 * @constructor
 */
export namespace Tankrs{
export class GameParams {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns GameParams
 */
__init(i:number, bb:flatbuffers.ByteBuffer):GameParams {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameParams= obj
 * @returns GameParams
 */
static getRootAsGameParams(bb:flatbuffers.ByteBuffer, obj?:GameParams):GameParams {
  return (obj || new GameParams()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param GameParams= obj
 * @returns GameParams
 */
static getSizePrefixedRootAsGameParams(bb:flatbuffers.ByteBuffer, obj?:GameParams):GameParams {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new GameParams()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
width():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
height():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startGameParams(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param number width
 */
static addWidth(builder:flatbuffers.Builder, width:number) {
  builder.addFieldInt16(0, width, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number height
 */
static addHeight(builder:flatbuffers.Builder, height:number) {
  builder.addFieldInt16(1, height, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endGameParams(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createGameParams(builder:flatbuffers.Builder, width:number, height:number):flatbuffers.Offset {
  GameParams.startGameParams(builder);
  GameParams.addWidth(builder, width);
  GameParams.addHeight(builder, height);
  return GameParams.endGameParams(builder);
}
}
}
/**
 * @constructor
 */
export namespace Tankrs{
export class WorldState {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns WorldState
 */
__init(i:number, bb:flatbuffers.ByteBuffer):WorldState {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param WorldState= obj
 * @returns WorldState
 */
static getRootAsWorldState(bb:flatbuffers.ByteBuffer, obj?:WorldState):WorldState {
  return (obj || new WorldState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param WorldState= obj
 * @returns WorldState
 */
static getSizePrefixedRootAsWorldState(bb:flatbuffers.ByteBuffer, obj?:WorldState):WorldState {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new WorldState()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param Tankrs.Tank= obj
 * @returns Tankrs.Tank|null
 */
player(obj?:Tankrs.Tank):Tankrs.Tank|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new Tankrs.Tank()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @param number index
 * @param Tankrs.Tank= obj
 * @returns Tankrs.Tank
 */
others(index: number, obj?:Tankrs.Tank):Tankrs.Tank|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new Tankrs.Tank()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
othersLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startWorldState(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset playerOffset
 */
static addPlayer(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, playerOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset othersOffset
 */
static addOthers(builder:flatbuffers.Builder, othersOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, othersOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createOthersVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startOthersVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endWorldState(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createWorldState(builder:flatbuffers.Builder, playerOffset:flatbuffers.Offset, othersOffset:flatbuffers.Offset):flatbuffers.Offset {
  WorldState.startWorldState(builder);
  WorldState.addPlayer(builder, playerOffset);
  WorldState.addOthers(builder, othersOffset);
  return WorldState.endWorldState(builder);
}
}
}
